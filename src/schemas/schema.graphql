extend type Account {
  isBaker: Boolean

  "current active status of the baker it should be false if the baker has no verified payment"
  isActiveBaker: Boolean
}

input UserProfileInput {
  city: String
  firstName: String
  lastName: String
  state: String
  phone: String!
}

extend type Mutation {
  bakerRegistration(
    user: CreateUserInput!
    profile: UserProfileInput!
  ): newUserResult!
}

input BakersFilterInput {
  city: String
  region: String
}

type InspirationGalleryMedia {
  URLs: ImageSizes
  priority: Int
}

type InspirationGallery implements Node {
  _id: ID!
  occasion: [String]
  title: String
  images: InspirationGalleryMedia
  bakerId: ID!
}

input InspirationGalleryMediaInput {
  URLs: ImageSizesInput
  priority: Int
}

input InspirationGalleryInput {
  occasion: [String]
  title: String
  images: [InspirationGalleryMediaInput]
}

# inspiration gallery mutations
extend type Mutation {
  createInspirationGallery(input: InspirationGalleryInput!): InspirationGallery
  updateInspirationGallery(input: InspirationGalleryInput!): InspirationGallery
}

extend type Query {
  bakers(filter: BakersFilterInput, searchQuery: String): ShopConnection
  baker(shopId: ID!): Shop
}
